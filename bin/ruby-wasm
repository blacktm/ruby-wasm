#!/usr/bin/env ruby
require 'fileutils'
require 'wasm/colorize'
require 'wasm/version'

# The installed gem directory
@gem_dir = "#{Gem::Specification.find_by_name('wasm').gem_dir}"

# Compilation optimizations flag
@optimize = false

def first_extant_file(*files)
  files.each do |file|
    if File.exist?( File.expand_path(file || "") )
      return file
    end
  end
  return files[-1]
end

def cmd(str)
  # puts str
  `#{str}`
end

# Build a Ruby file
def build(rb_file)

  # Check if source file provided is good
  if !rb_file
    puts "Provide a Ruby file to build"
    exit
  elsif !File.exists? rb_file
    puts "Can't find file: #{rb_file}"
    exit
  end

  # Check for compiler toolchain issues
  if doctor(:building)
    puts "Fix errors before building.\n\n"
    return false
  end

  # Clean up the build directory
  FileUtils.rm_f 'build/app.c'
  FileUtils.rm_f 'build/app.js'
  FileUtils.rm_f 'build/app.wasm'
  FileUtils.rm_f 'build/app.html'

  # Create the build directory
  FileUtils.mkdir_p 'build'

  print "\nCompiling #{rb_file}..."

  mrbc = first_extant_file( "./mruby/build/host/bin/mrbc" , ENV["MRBC"] , "mrbc")
  # Create MRuby bytecode from Ruby source file
  cmd("#{mrbc} -Bruby_app -obuild/app.c #{rb_file}")

  # Add MRuby init code to app bytecode
  open('build/app.c', 'a') do |f|
    f << "\n\n" << File.read("#{@gem_dir}/assets/mruby_init.c")
  end

  include_dir = @gem_dir + '/assets/mruby/include'
  libmruby = first_extant_file( "./mruby/build/emscripten/lib/libmruby.a" , ENV["LIBMRUBY"] , @gem_dir + '/assets/mruby/libmruby.a' )
  # Compile using Emscripten
  cmd("emcc -s WASM=1 #{ if @optimize then '-Os' end } -I #{include_dir} build/app.c #{libmruby} -o build/app.js #{ if @optimize then '--closure 1' end }")

  # Copy HTML template from gem assets to build directory
  FileUtils.cp "#{@gem_dir}/assets/template.html", 'build/app.html'

  # Clean up
  FileUtils.rm_f 'build/app.c'

  puts "done".success, "
Files created:
  build/
  ├── app.html
  ├── app.js
  └── app.wasm\n\n"

end

# Serve a build WebAssembly binary
def serve(open_browser)

  if !File.exists? 'build/app.html'
    puts 'No WebAssembly app built!'
    exit
  end

  if open_browser
    open_cmd = 'open'

    case RUBY_PLATFORM
    when /linux/
      open_cmd = "xdg-#{open_cmd}"
    when /mingw/
      open_cmd = 'start'
    end

    Thread.new do
      sleep 2
      `#{open_cmd} http://localhost:8000/app.html`
    end
  end

  `ruby -run -ehttpd ./build -p8000`
end

# Check for problems
def doctor(mode = nil)

  errors = false
  mruby_errors = false
  emscripten_errors = false

  puts "\nChecking for MRuby"

  # Check for `mrbc`
  print '  mrbc...'
  if `which mrbc`.empty?
    puts 'not found'.error
    mruby_errors = true
  else
    puts 'found'.success
  end

  puts "\nChecking for Emscripten tools"

  # Check for `emcc`
  print '  emcc...'
  if `which emcc`.empty?
    puts 'not found'.error
    emscripten_errors = true
  else
    puts 'found'.success
  end

  # Check for `emar`
  print '  emar...'
  if `which emar`.empty?
    puts 'not found'.error
    emscripten_errors = true
  else
    puts 'found'.success
  end

  if mruby_errors || emscripten_errors then errors = true end

  if errors
    puts "\nErrors were found!\n\n"
    if mruby_errors
      puts "* Did you install MRuby?"
    end
    if emscripten_errors
      puts "* Did you run \`./emsdk_env.sh\` ?", "  For help, check out the \"Getting Started\" guide on webassembly.org"
    end
    puts "\n"
  else
    puts "\n👍 Everything looks good!\n\n" unless mode == :building
  end

  errors
end

def vendor_mruby
  if File.exist?("#{@gem_dir}/mruby/README.md")
    Dir.mkdir('mruby')
    FileUtils.cp_r "#{@gem_dir}/mruby", "."
    FileUtils.cp "#{@gem_dir}/build_config.rb", "./mruby/build_config.rb"
  else
    puts "Gem was checked out without submodules, cannot vendor mruby"
    puts "Try these commands yourself:"
    puts "  git clone https://github.com/mruby/mruby"
    puts "  cp #{@gem_dir}/build_config.rb ./mruby/build_config.rb"
    exit 1
  end
end

def compile_mruby
  Dir.chdir('mruby') do
    system 'rake'
  end
end

def vendor_mruby
  if File.exist?("#{@gem_dir}/mruby/README.md")
    Dir.mkdir('mruby')
    FileUtils.cp_r "#{@gem_dir}/mruby", "."
    FileUtils.cp "#{@gem_dir}/build_config.rb", "./mruby/build_config.rb"
  else
    puts "Gem was checked out without submodules, cannot vendor mruby"
    puts "Try these commands yourself:"
    puts "  git clone https://github.com/mruby/mruby"
    puts "  cp #{@gem_dir}/build_config.rb ./mruby/build_config.rb"
    exit 1
  end
end

def compile_mruby
  Dir.chdir('mruby') do
    system 'rake'
  end
end

# Check Command-line Arguments #################################################

usage = 'Ruby on WebAssembly'.bold + "\n
Usage: ruby-wasm <command> <options>
                 [-v|--version]

Summary of commands and options:
  build <file.rb>    Build a Ruby source file
    --optimize         Compile with all optimizations
  serve              Serve the build WebAssembly binary
    -o|--open          Open the default web browser after serving
  doctor             Check for problems with your WebAssembly toolchain
  vendor_mruby       Copy mruby source code into ./mruby
  compile_mruby      Compile mruby from ./mruby
  -v|--version       Prints the installed version\n\n"

case ARGV[0]
when 'build'
  if ARGV.delete '--optimize' then @optimize = true end
  build ARGV[1]
when 'serve'
  case ARGV[1]
  when '-o', '--open'
    serve(true)
  else
    serve(false)
  end
when 'doctor'
  doctor
when 'vendor_mruby'
  vendor_mruby
when 'compile_mruby'
  compile_mruby
when '-v', '--version'
  puts WASM::VERSION
else
  puts usage
end
